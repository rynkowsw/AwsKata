AWSTemplateFormatVersion: 2010-09-09
Parameters:
  pResourceNamePrefix:
    Type: String
    Description: prefix used in creation of name for each resource in this template
  pKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  pClusterMemberAmiId:
    Description: unique identifier of AMI used to spin up cluster members
    Type: AWS::EC2::Image::Id
    Default: ami-f9619996
  ec2InstanceType:
    Description: The EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
    ConstraintDescription: EC2 instance type
  pVpcId:
    Description: Unique identifier of vpc to host Nomad cluster
    Type: AWS::EC2::VPC::Id
  pSubnetIds:
    Description: Unique identifier of subnets inside given vpc to host Nomad cluster
    Type: List<AWS::EC2::Subnet::Id>
  pSSHAccessCIDR:
    Description: IP adresses allowed ssh access to Nomad cluster members machines
    Type: String
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
Rules:
  uSubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
        - Fn::ValueOfAll:
          - AWS::EC2::Subnet::Id
          - VpcId
        - Fn::RefAll: AWS::EC2::VPC::Id
        AssertDescription: All subnets must in the VPC

Resources:
  ec2LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_install_:
              command: !Sub |
                #!/bin/bash

          files:
            /opt/ecr/reauthenticate.sh:
              content: !Sub |
                #!/bin/bash
                $(aws --region=${AWS::Region} ecr get-login)
                cp -f /root/.docker/config.json /etc/docker/docker-ecr-auth.json
                chmod 0440 /etc/docker/docker-ecr-auth.json
              mode: '000750'
              owner: root
              group: root
            /etc/cron.d/reauthenticate_every_30_minutes:
              content: !Sub |
                */30 * * * * /opt/ecr/reauthenticate.sh 2>> /var/log/ecr_reauthenticate_error.log
              mode: '000440'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack = ${AWS::StackId}
                region = ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ec2LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ec2LaunchConfiguration --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              docker:
                enabled: true
                ensureRunning: true
              cgconfig:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !Ref pClusterMemberAmiId
      InstanceMonitoring: false
      InstanceType: !Ref ec2InstanceType
      KeyName: !Ref pKeyName
      SecurityGroups:
        - !Ref rSSHAccessSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y \
              aws-cfn-bootstrap \
              unzip \
              wget \
              docker
          function error_exit {
            /opt/aws/bin/cfn-signal \
                --success false \
                --reason "$1 - look on /var/log" \
                --stack ${AWS::StackName} \
                --resource ec2AutoScalingGroup \
                --region ${AWS::Region}
            exit 1
          }
          trap 'error_exit "Line no: $LINENO"' ERR
          /opt/aws/bin/cfn-init \
              --stack ${AWS::StackName} \
              --resource ec2LaunchConfiguration \
              --region ${AWS::Region} || error_exit 'Error during initialization script'
          /opt/aws/bin/cfn-signal --success true \
              --stack ${AWS::StackName} \
              --resource ec2AutoScalingGroup \
              --region ${AWS::Region}

  ec2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 1
      HealthCheckGracePeriod: 5
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref ec2LaunchConfiguration
      MaxSize: 1
      MinSize: 1
      VPCZoneIdentifier: !Ref pSubnetIds
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 2
        PauseTime: PT10M
        WaitOnResourceSignals: true

  rSSHAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for accessing nomad members by SSH
      SecurityGroupIngress:
        - CidrIp: !Ref pSSHAccessCIDR
          FromPort: 22
          IpProtocol: TCP
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub "${pResourceNamePrefix}-ssh-sg"
      VpcId: !Ref pVpcId
